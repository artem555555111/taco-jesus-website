#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –≥–∞–ª–µ—Ä–µ–∏
const galleryImagesPath = path.join(__dirname, '../public/assets/gallery');
const scannerPath = path.join(__dirname, '../src/utils/galleryImageScanner.js');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –ø–∞–ø–∫–∏
function getImageFiles() {
  try {
    const files = fs.readdirSync(galleryImagesPath);
    return files.filter(file => {
      const ext = path.extname(file).toLowerCase();
      return ['.jpg', '.jpeg', '.png', '.webp'].includes(ext);
    });
  } catch (error) {
    console.error('Error reading gallery images directory:', error);
    return [];
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ scanner
function updateScannerFile(imageFiles) {
  const imageList = imageFiles.map(file => `"${file}"`).join(',\n  ');
  
  const newContent = `// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≥–∞–ª–µ—Ä–µ–∏
// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ API –≤—ã–∑–æ–≤

// –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ gallery
const availableImages = [
  ${imageList}
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏
export const getGalleryImage = (imageId) => {
  const imageIndex = (imageId - 1) % availableImages.length;
  return \`/assets/gallery/\${availableImages[imageIndex]}\`;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
export const getAllGalleryImages = () => {
  return availableImages.map((image, index) => ({
    id: index + 1,
    path: \`/assets/gallery/\${image}\`,
    name: image
  }));
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
export const checkGalleryImageExists = async (imagePath) => {
  try {
    const response = await fetch(imagePath, { method: 'HEAD' });
    return response.ok;
  } catch (error) {
    return false;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≥–∞–ª–µ—Ä–µ–µ
export const assignImagesToGallery = (galleryItems) => {
  return galleryItems.map((item, index) => ({
    ...item,
    imagePath: getGalleryImage(item.id)
  }));
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫
export const addNewGalleryImage = (imageName) => {
  if (!availableImages.includes(imageName)) {
    availableImages.push(imageName);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ ID
export const getImageForGalleryItem = (itemId) => {
  return getGalleryImage(itemId);
};
`;

  try {
    fs.writeFileSync(scannerPath, newContent);
    console.log('‚úÖ Gallery image scanner updated successfully!');
    console.log(`üì∏ Found ${imageFiles.length} images:`);
    imageFiles.forEach((file, index) => {
      console.log(`   ${index + 1}. ${file}`);
    });
  } catch (error) {
    console.error('Error updating gallery scanner file:', error);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.log('üîç Scanning gallery images...');
  const imageFiles = getImageFiles();
  
  if (imageFiles.length === 0) {
    console.log('‚ùå No images found in gallery directory');
    return;
  }
  
  updateScannerFile(imageFiles);
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main();
}

module.exports = { getImageFiles, updateScannerFile };
